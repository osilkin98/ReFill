{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["randomIndex","items","prevIdx","idx","Math","floor","random","length","abs","createFiltered","filteredText","filterStack","filtered","split","complete","i","push","FilteredInput","props","slursRegex","RegExp","slurs","join","state","value","valueFiltered","unFilterStack","handleChange","bind","event","target","stack","Object","assign","this","unfilteredStack","replace","match","pop","phrase","adjIdx","adjectives","nounIdx","nouns","makePhrase","setState","className","id","type","onChange","autoFocus","onBlur","document","getElementById","focus","React","Component","App","auto","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ywfAKIA,G,MAAc,SAASC,GAAsB,IAAfC,EAAc,uDAAN,KAClCC,EAAMC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMM,QAI3C,OAHe,OAAZL,GAAsBE,KAAKI,IAAIL,EAAMD,GAAW,IAAM,IACrDC,GAAOA,EAAM,GAAKF,EAAMM,QAErBJ,IAIX,SAASM,EAAeC,EAAcC,GAGlC,IAFA,IAAIC,EAAWF,EAAaG,MAAM,QAC9BC,EAAW,CAACF,EAAS,IAChBG,EAAI,EAAGA,EAAIJ,EAAYJ,OAAQQ,IACpCD,EAASE,KAAK,gCAASL,EAAYI,KACnCD,EAASE,KAAKJ,EAASG,EAAI,IAE/B,OAAOD,EAgBJ,IAAMG,EAAb,YACI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,WAAa,IAAIC,OAAO,IAAMC,IAAMC,KAAK,KAAO,IAAK,OAC1D,EAAKC,MAAQ,CACTC,MAAO,GACPC,cAAe,cACfd,YAAa,GACbe,cAAe,IAEnB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBATL,EADvB,0EAciBC,GAkBT,IAjBA,IAAIL,EAAQK,EAAMC,OAAON,MACrBO,EAAQC,OAAOC,OAAO,GAAIC,KAAKX,MAAMZ,aACrCwB,EAAkBH,OAAOC,OAAO,GAAIC,KAAKX,MAAMG,eAC/CvB,EAAM,EACNS,EAAWY,EAAMY,QAAQF,KAAKf,WAAY,SAACkB,GAUvC,QATAlC,IACYgC,EAAgB5B,QAAU8B,IAAUF,EAAgBhC,EAAM,KAClEgC,EAAgBG,MAChBP,EAAMO,OAENnC,EAAMgC,EAAgB5B,SACtB4B,EAAgBnB,KAAKqB,GACrBN,EAAMf,KAxC1B,WACI,IAAIuB,EAAS,GACTC,EAASxC,EAAYyC,KACzBF,EAAOvB,KAAKyB,IAAWD,IACnBpC,KAAKE,SAAW,KAChBkC,EAASxC,EAAYyC,IAAYD,GACjCD,EAAOvB,KAAKyB,IAAWD,KAE3B,IAAIE,EAAU1C,EAAY2C,KAE1B,OADAJ,EAAOvB,KAAK2B,IAAMD,IACXH,EAAOjB,KAAK,KA8BQsB,KAER,SAGRzC,EAAM4B,EAAMxB,QAAUwB,EAAMO,MAAOH,EAAgBG,MAC1DJ,KAAKW,SAAS,CACVrB,MAAOA,EACPC,cAAeb,EACfD,YAAaoB,EACbL,cAAeS,MArC3B,+BA2CQ,OACI,0BAAMW,UAAU,gBACZ,2BACIC,GAAG,cACHC,KAAK,OACLxB,MAAOU,KAAKX,MAAMC,MAClByB,SAAUf,KAAKP,aACfuB,WAAS,EACTC,OAAQ,kBAAMC,SAASC,eAAe,eAAeC,WAGzD,uBAAGR,UAAU,cAAcrC,EAAeyB,KAAKX,MAAME,cAAeS,KAAKX,MAAMG,gBAC/E,uBAAGoB,UAAU,YAAYrC,EAAeyB,KAAKX,MAAME,cAAeS,KAAKX,MAAMZ,mBAvD7F,GAAmC4C,IAAMC,WAwE1BC,MAVf,WACE,OACE,yBAAKX,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAeY,MAAI,OC3FPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2DCVN0B,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASC,eAAe,SDyH3C,kBAAmBY,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.86809df4.chunk.js","sourcesContent":["import React from 'react';\nimport {nouns, adjectives, slurs} from './words';\nimport './App.css';\n\n\nlet randomIndex = function(items, prevIdx=null) {\n    let idx = Math.floor(Math.random() * items.length);\n    if(prevIdx !== null && ( Math.abs(idx - prevIdx) % 2 === 0)) {\n        idx = (idx + 1) % items.length;\n    }\n    return idx;\n};\n\n// filterText: \"1 2<%f>3 4<%f>\"\nfunction createFiltered(filteredText, filterStack) {\n    let filtered = filteredText.split('<%f>');\n    let complete = [filtered[0]];\n    for (let i = 0; i < filterStack.length; i++) {\n        complete.push(<strong>{filterStack[i]}</strong>);\n        complete.push(filtered[i + 1]);\n    }\n    return complete;\n}\n\nfunction makePhrase() {\n    let phrase = [];\n    let adjIdx = randomIndex(adjectives);\n    phrase.push(adjectives[adjIdx]);\n    if (Math.random() > 0.5) {\n        adjIdx = randomIndex(adjectives, adjIdx);\n        phrase.push(adjectives[adjIdx])\n    }\n    let nounIdx = randomIndex(nouns);\n    phrase.push(nouns[nounIdx]);\n    return phrase.join(' ');\n}\n\nexport class FilteredInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.slursRegex = new RegExp('(' + slurs.join('|') + ')', 'giu');\n        this.state = {\n            value: '',\n            valueFiltered: 'Placeholder',\n            filterStack: [],\n            unFilterStack: []\n        };\n        this.handleChange = this.handleChange.bind(this);\n\n    }\n\n    handleChange(event) {\n        let value = event.target.value;\n        let stack = Object.assign([], this.state.filterStack);\n        let unfilteredStack = Object.assign([], this.state.unFilterStack);\n        let idx = 0;\n        let filtered = value.replace(this.slursRegex, (match) => {\n                idx++;\n                if (idx === unfilteredStack.length && match !== unfilteredStack[idx - 1]) {\n                    unfilteredStack.pop();\n                    stack.pop();\n                }\n                if (idx > unfilteredStack.length) {\n                    unfilteredStack.push(match);\n                    stack.push(makePhrase());\n                }\n                return '<%f>';\n            }\n        );\n        while (idx < stack.length) { stack.pop(); unfilteredStack.pop(); }\n        this.setState({\n            value: value,\n            valueFiltered: filtered,\n            filterStack: stack,\n            unFilterStack: unfilteredStack\n        });\n        // todo: iterate through valueFiltered and record new phrases if any then pop off unused ones if shortened\n    }\n\n    render() {\n        return (\n            <span className=\"filterOutput\">\n                <input\n                    id=\"filterInput\"\n                    type=\"text\"\n                    value={this.state.value}\n                    onChange={this.handleChange}\n                    autoFocus\n                    onBlur={() => document.getElementById('filterInput').focus()}\n\n                />\n                <p className=\"unfiltered\">{createFiltered(this.state.valueFiltered, this.state.unFilterStack)}</p>\n                <p className=\"filtered\">{createFiltered(this.state.valueFiltered, this.state.filterStack)}</p>\n            </span>\n        );\n    }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <FilteredInput auto/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}